diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..a6a31f8
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,37 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "twirp",
+    srcs = [
+        "client_options.go",
+        "context.go",
+        "errors.go",
+        "interceptors.go",
+        "server_options.go",
+        "version_constant.go",
+    ],
+    importpath = "github.com/twitchtv/twirp",
+    visibility = ["//visibility:public"],
+    deps = ["//internal/contextkeys"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":twirp",
+    visibility = ["//visibility:public"],
+)
+
+go_test(
+    name = "twirp_test",
+    srcs = [
+        "client_options_test.go",
+        "errors_1_13_test.go",
+        "errors_test.go",
+        "interceptors_test.go",
+        "license_test.go",
+        "server_options_test.go",
+        "vendor_test.go",
+    ],
+    embed = [":twirp"],
+    deps = ["//vendor/github.com/pkg/errors"],
+)
diff --git a/_tools/src/github.com/kisielk/errcheck/BUILD.bazel b/_tools/src/github.com/kisielk/errcheck/BUILD.bazel
new file mode 100644
index 0000000..a970fe0
--- /dev/null
+++ b/_tools/src/github.com/kisielk/errcheck/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "errcheck_lib",
+    srcs = ["main.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/github.com/kisielk/errcheck",
+    visibility = ["//visibility:private"],
+    deps = [
+        "@com_github_kisielk_errcheck//internal/errcheck:go_default_library",
+        "@com_github_kisielk_gotool//:go_default_library",
+    ],
+)
+
+go_binary(
+    name = "errcheck",
+    embed = [":errcheck_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/github.com/kisielk/errcheck/internal/errcheck/BUILD.bazel b/_tools/src/github.com/kisielk/errcheck/internal/errcheck/BUILD.bazel
new file mode 100644
index 0000000..4a04056
--- /dev/null
+++ b/_tools/src/github.com/kisielk/errcheck/internal/errcheck/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "errcheck",
+    srcs = ["errcheck.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/github.com/kisielk/errcheck/internal/errcheck",
+    visibility = ["//_tools/src/github.com/kisielk/errcheck:__subpackages__"],
+    deps = ["@org_golang_x_tools//go/loader:go_default_library"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":errcheck",
+    visibility = ["//_tools/src/github.com/kisielk/errcheck:__subpackages__"],
+)
diff --git a/_tools/src/github.com/kisielk/gotool/BUILD.bazel b/_tools/src/github.com/kisielk/gotool/BUILD.bazel
new file mode 100644
index 0000000..cc2ff29
--- /dev/null
+++ b/_tools/src/github.com/kisielk/gotool/BUILD.bazel
@@ -0,0 +1,22 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "gotool",
+    srcs = [
+        "go13.go",
+        "go14-15.go",
+        "go16-18.go",
+        "match.go",
+        "match18.go",
+        "tool.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/github.com/kisielk/gotool",
+    visibility = ["//visibility:public"],
+    deps = ["@com_github_kisielk_gotool//internal/load:go_default_library"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":gotool",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/github.com/kisielk/gotool/internal/load/BUILD.bazel b/_tools/src/github.com/kisielk/gotool/internal/load/BUILD.bazel
new file mode 100644
index 0000000..7b77b97
--- /dev/null
+++ b/_tools/src/github.com/kisielk/gotool/internal/load/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "load",
+    srcs = [
+        "path.go",
+        "pkg.go",
+        "search.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/github.com/kisielk/gotool/internal/load",
+    visibility = ["//_tools/src/github.com/kisielk/gotool:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":load",
+    visibility = ["//_tools/src/github.com/kisielk/gotool:__subpackages__"],
+)
diff --git a/_tools/src/github.com/twitchtv/retool/BUILD.bazel b/_tools/src/github.com/twitchtv/retool/BUILD.bazel
new file mode 100644
index 0000000..6ce4899
--- /dev/null
+++ b/_tools/src/github.com/twitchtv/retool/BUILD.bazel
@@ -0,0 +1,33 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "retool_lib",
+    srcs = [
+        "add.go",
+        "build.go",
+        "clean.go",
+        "do.go",
+        "input.go",
+        "main.go",
+        "manifest.go",
+        "print.go",
+        "remove.go",
+        "spec.go",
+        "sync.go",
+        "tool.go",
+        "tooldir.go",
+        "upgrade.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/github.com/twitchtv/retool",
+    visibility = ["//visibility:private"],
+    deps = [
+        "//_tools/src/github.com/twitchtv/retool/vendor/github.com/Masterminds/semver",
+        "//_tools/src/github.com/twitchtv/retool/vendor/github.com/pkg/errors",
+    ],
+)
+
+go_binary(
+    name = "retool",
+    embed = [":retool_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/github.com/twitchtv/retool/vendor/github.com/Masterminds/semver/BUILD.bazel b/_tools/src/github.com/twitchtv/retool/vendor/github.com/Masterminds/semver/BUILD.bazel
new file mode 100644
index 0000000..9822615
--- /dev/null
+++ b/_tools/src/github.com/twitchtv/retool/vendor/github.com/Masterminds/semver/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "semver",
+    srcs = [
+        "collection.go",
+        "constraints.go",
+        "doc.go",
+        "version.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/_tools/src/github.com/twitchtv/retool/vendor/github.com/Masterminds/semver",
+    importpath = "github.com/Masterminds/semver",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":semver",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/github.com/twitchtv/retool/vendor/github.com/pkg/errors/BUILD.bazel b/_tools/src/github.com/twitchtv/retool/vendor/github.com/pkg/errors/BUILD.bazel
new file mode 100644
index 0000000..bc03c4a
--- /dev/null
+++ b/_tools/src/github.com/twitchtv/retool/vendor/github.com/pkg/errors/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "errors",
+    srcs = [
+        "errors.go",
+        "stack.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/_tools/src/github.com/twitchtv/retool/vendor/github.com/pkg/errors",
+    importpath = "github.com/pkg/errors",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":errors",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/golang.org/x/sys/execabs/BUILD.bazel b/_tools/src/golang.org/x/sys/execabs/BUILD.bazel
new file mode 100644
index 0000000..5261580
--- /dev/null
+++ b/_tools/src/golang.org/x/sys/execabs/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "execabs",
+    srcs = ["execabs.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/golang.org/x/sys/execabs",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":execabs",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/golang.org/x/tools/go/ast/astutil/BUILD.bazel b/_tools/src/golang.org/x/tools/go/ast/astutil/BUILD.bazel
new file mode 100644
index 0000000..0907be2
--- /dev/null
+++ b/_tools/src/golang.org/x/tools/go/ast/astutil/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "astutil",
+    srcs = [
+        "enclosing.go",
+        "imports.go",
+        "rewrite.go",
+        "util.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/golang.org/x/tools/go/ast/astutil",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":astutil",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/golang.org/x/tools/go/buildutil/BUILD.bazel b/_tools/src/golang.org/x/tools/go/buildutil/BUILD.bazel
new file mode 100644
index 0000000..138abb8
--- /dev/null
+++ b/_tools/src/golang.org/x/tools/go/buildutil/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "buildutil",
+    srcs = [
+        "allpackages.go",
+        "fakecontext.go",
+        "overlay.go",
+        "tags.go",
+        "util.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/golang.org/x/tools/go/buildutil",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":buildutil",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/golang.org/x/tools/go/internal/cgo/BUILD.bazel b/_tools/src/golang.org/x/tools/go/internal/cgo/BUILD.bazel
new file mode 100644
index 0000000..932d6c1
--- /dev/null
+++ b/_tools/src/golang.org/x/tools/go/internal/cgo/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "cgo",
+    srcs = [
+        "cgo.go",
+        "cgo_pkgconfig.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/golang.org/x/tools/go/internal/cgo",
+    visibility = ["//_tools/src/golang.org/x/tools/go:__subpackages__"],
+    deps = ["@org_golang_x_sys//execabs:go_default_library"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":cgo",
+    visibility = ["//_tools/src/golang.org/x/tools/go:__subpackages__"],
+)
diff --git a/_tools/src/golang.org/x/tools/go/loader/BUILD.bazel b/_tools/src/golang.org/x/tools/go/loader/BUILD.bazel
new file mode 100644
index 0000000..d9783a3
--- /dev/null
+++ b/_tools/src/golang.org/x/tools/go/loader/BUILD.bazel
@@ -0,0 +1,23 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "loader",
+    srcs = [
+        "doc.go",
+        "loader.go",
+        "util.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/golang.org/x/tools/go/loader",
+    visibility = ["//visibility:public"],
+    deps = [
+        "@org_golang_x_tools//go/ast/astutil:go_default_library",
+        "@org_golang_x_tools//go/buildutil:go_default_library",
+        "@org_golang_x_tools//go/internal/cgo:go_default_library",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":loader",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/cmd/protoc-gen-go/BUILD.bazel b/_tools/src/google.golang.org/protobuf/cmd/protoc-gen-go/BUILD.bazel
new file mode 100644
index 0000000..0be571c
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/cmd/protoc-gen-go/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "protoc-gen-go_lib",
+    srcs = ["main.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/cmd/protoc-gen-go",
+    visibility = ["//visibility:private"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/version",
+        "@org_golang_google_protobuf//cmd/protoc-gen-go/internal_gengo:go_default_library",
+        "@org_golang_google_protobuf//compiler/protogen:go_default_library",
+    ],
+)
+
+go_binary(
+    name = "protoc-gen-go",
+    embed = [":protoc-gen-go_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/cmd/protoc-gen-go/internal_gengo/BUILD.bazel b/_tools/src/google.golang.org/protobuf/cmd/protoc-gen-go/internal_gengo/BUILD.bazel
new file mode 100644
index 0000000..26280b2
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/cmd/protoc-gen-go/internal_gengo/BUILD.bazel
@@ -0,0 +1,31 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "internal_gengo",
+    srcs = [
+        "init.go",
+        "main.go",
+        "reflect.go",
+        "well_known_types.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/cmd/protoc-gen-go/internal_gengo",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/encoding/tag",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/version",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+        "//vendor/google.golang.org/protobuf/types/pluginpb",
+        "@org_golang_google_protobuf//compiler/protogen:go_default_library",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":internal_gengo",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/compiler/protogen/BUILD.bazel b/_tools/src/google.golang.org/protobuf/compiler/protogen/BUILD.bazel
new file mode 100644
index 0000000..29877af
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/compiler/protogen/BUILD.bazel
@@ -0,0 +1,25 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protogen",
+    srcs = ["protogen.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/compiler/protogen",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/prototext",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+        "//vendor/google.golang.org/protobuf/types/pluginpb",
+        "@org_golang_google_protobuf//reflect/protodesc:go_default_library",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protogen",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/encoding/prototext/BUILD.bazel b/_tools/src/google.golang.org/protobuf/encoding/prototext/BUILD.bazel
new file mode 100644
index 0000000..d422a83
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/encoding/prototext/BUILD.bazel
@@ -0,0 +1,33 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "prototext",
+    srcs = [
+        "decode.go",
+        "doc.go",
+        "encode.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/encoding/prototext",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/encoding/text",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/order",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/set",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":prototext",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/encoding/protowire/BUILD.bazel b/_tools/src/google.golang.org/protobuf/encoding/protowire/BUILD.bazel
new file mode 100644
index 0000000..5d45e31
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/encoding/protowire/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protowire",
+    srcs = ["wire.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/encoding/protowire",
+    visibility = ["//visibility:public"],
+    deps = ["//vendor/google.golang.org/protobuf/internal/errors"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protowire",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/descfmt/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/descfmt/BUILD.bazel
new file mode 100644
index 0000000..07671c7
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/descfmt/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "descfmt",
+    srcs = ["stringer.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/descfmt",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/detrand",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":descfmt",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/descopts/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/descopts/BUILD.bazel
new file mode 100644
index 0000000..98b5de1
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/descopts/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "descopts",
+    srcs = ["options.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/descopts",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = ["//vendor/google.golang.org/protobuf/reflect/protoreflect"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":descopts",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/detrand/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/detrand/BUILD.bazel
new file mode 100644
index 0000000..cde316e
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/detrand/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "detrand",
+    srcs = ["rand.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/detrand",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":detrand",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/encoding/defval/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/encoding/defval/BUILD.bazel
new file mode 100644
index 0000000..b1c0619
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/encoding/defval/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "defval",
+    srcs = ["default.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/encoding/defval",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/encoding/text",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":defval",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/encoding/messageset/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/encoding/messageset/BUILD.bazel
new file mode 100644
index 0000000..a56eaaf
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/encoding/messageset/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "messageset",
+    srcs = ["messageset.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/encoding/messageset",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":messageset",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/encoding/tag/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/encoding/tag/BUILD.bazel
new file mode 100644
index 0000000..901f414
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/encoding/tag/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "tag",
+    srcs = ["tag.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/encoding/tag",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/encoding/defval",
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":tag",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/encoding/text/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/encoding/text/BUILD.bazel
new file mode 100644
index 0000000..ed9c062
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/encoding/text/BUILD.bazel
@@ -0,0 +1,27 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "text",
+    srcs = [
+        "decode.go",
+        "decode_number.go",
+        "decode_string.go",
+        "decode_token.go",
+        "doc.go",
+        "encode.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/encoding/text",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/detrand",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":text",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/errors/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/errors/BUILD.bazel
new file mode 100644
index 0000000..ab123b4
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/errors/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "errors",
+    srcs = [
+        "errors.go",
+        "is_go112.go",
+        "is_go113.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/errors",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = ["//vendor/google.golang.org/protobuf/internal/detrand"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":errors",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/filedesc/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/filedesc/BUILD.bazel
new file mode 100644
index 0000000..4cea7f0
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/filedesc/BUILD.bazel
@@ -0,0 +1,36 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "filedesc",
+    srcs = [
+        "build.go",
+        "desc.go",
+        "desc_init.go",
+        "desc_lazy.go",
+        "desc_list.go",
+        "desc_list_gen.go",
+        "placeholder.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/filedesc",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/descfmt",
+        "//vendor/google.golang.org/protobuf/internal/descopts",
+        "//vendor/google.golang.org/protobuf/internal/encoding/defval",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":filedesc",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/filetype/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/filetype/BUILD.bazel
new file mode 100644
index 0000000..cb09f49
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/filetype/BUILD.bazel
@@ -0,0 +1,21 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "filetype",
+    srcs = ["build.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/filetype",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/descopts",
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/impl",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":filetype",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/flags/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/flags/BUILD.bazel
new file mode 100644
index 0000000..37875d6
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/flags/BUILD.bazel
@@ -0,0 +1,17 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "flags",
+    srcs = [
+        "flags.go",
+        "proto_legacy_disable.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/flags",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":flags",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/genid/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/genid/BUILD.bazel
new file mode 100644
index 0000000..c48aa08
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/genid/BUILD.bazel
@@ -0,0 +1,31 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "genid",
+    srcs = [
+        "any_gen.go",
+        "api_gen.go",
+        "descriptor_gen.go",
+        "doc.go",
+        "duration_gen.go",
+        "empty_gen.go",
+        "field_mask_gen.go",
+        "goname.go",
+        "map_entry.go",
+        "source_context_gen.go",
+        "struct_gen.go",
+        "timestamp_gen.go",
+        "type_gen.go",
+        "wrappers.go",
+        "wrappers_gen.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/genid",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = ["//vendor/google.golang.org/protobuf/reflect/protoreflect"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":genid",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/impl/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/impl/BUILD.bazel
new file mode 100644
index 0000000..1677533
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/impl/BUILD.bazel
@@ -0,0 +1,67 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "impl",
+    srcs = [
+        "api_export.go",
+        "checkinit.go",
+        "codec_extension.go",
+        "codec_field.go",
+        "codec_gen.go",
+        "codec_map.go",
+        "codec_map_go111.go",
+        "codec_map_go112.go",
+        "codec_message.go",
+        "codec_messageset.go",
+        "codec_tables.go",
+        "codec_unsafe.go",
+        "convert.go",
+        "convert_list.go",
+        "convert_map.go",
+        "decode.go",
+        "encode.go",
+        "enum.go",
+        "extension.go",
+        "legacy_enum.go",
+        "legacy_export.go",
+        "legacy_extension.go",
+        "legacy_file.go",
+        "legacy_message.go",
+        "merge.go",
+        "merge_gen.go",
+        "message.go",
+        "message_reflect.go",
+        "message_reflect_field.go",
+        "message_reflect_gen.go",
+        "pointer_unsafe.go",
+        "validate.go",
+        "weak.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/impl",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/prototext",
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/descopts",
+        "//vendor/google.golang.org/protobuf/internal/detrand",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/encoding/tag",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/order",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+        "//vendor/google.golang.org/protobuf/runtime/protoiface",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":impl",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/order/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/order/BUILD.bazel
new file mode 100644
index 0000000..8ac63b2
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/order/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "order",
+    srcs = [
+        "order.go",
+        "range.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/order",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = ["//vendor/google.golang.org/protobuf/reflect/protoreflect"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":order",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/pragma/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/pragma/BUILD.bazel
new file mode 100644
index 0000000..3e0e1be
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/pragma/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "pragma",
+    srcs = ["pragma.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/pragma",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":pragma",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/set/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/set/BUILD.bazel
new file mode 100644
index 0000000..a5b550d
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/set/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "set",
+    srcs = ["ints.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/set",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":set",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/strs/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/strs/BUILD.bazel
new file mode 100644
index 0000000..ab46e8c
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/strs/BUILD.bazel
@@ -0,0 +1,21 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "strs",
+    srcs = [
+        "strings.go",
+        "strings_unsafe.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/strs",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":strs",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/internal/version/BUILD.bazel b/_tools/src/google.golang.org/protobuf/internal/version/BUILD.bazel
new file mode 100644
index 0000000..1a4f384
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/internal/version/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "version",
+    srcs = ["version.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/internal/version",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":version",
+    visibility = ["//_tools/src/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/proto/BUILD.bazel b/_tools/src/google.golang.org/protobuf/proto/BUILD.bazel
new file mode 100644
index 0000000..4c5188f
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/proto/BUILD.bazel
@@ -0,0 +1,44 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "proto",
+    srcs = [
+        "checkinit.go",
+        "decode.go",
+        "decode_gen.go",
+        "doc.go",
+        "encode.go",
+        "encode_gen.go",
+        "equal.go",
+        "extension.go",
+        "merge.go",
+        "messageset.go",
+        "proto.go",
+        "proto_methods.go",
+        "reset.go",
+        "size.go",
+        "size_gen.go",
+        "wrappers.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/proto",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/order",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+        "//vendor/google.golang.org/protobuf/runtime/protoiface",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":proto",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/reflect/protodesc/BUILD.bazel b/_tools/src/google.golang.org/protobuf/reflect/protodesc/BUILD.bazel
new file mode 100644
index 0000000..c578857
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/reflect/protodesc/BUILD.bazel
@@ -0,0 +1,34 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protodesc",
+    srcs = [
+        "desc.go",
+        "desc_init.go",
+        "desc_resolve.go",
+        "desc_validate.go",
+        "proto.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/reflect/protodesc",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/encoding/defval",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protodesc",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/reflect/protoreflect/BUILD.bazel b/_tools/src/google.golang.org/protobuf/reflect/protoreflect/BUILD.bazel
new file mode 100644
index 0000000..1329e5a
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/reflect/protoreflect/BUILD.bazel
@@ -0,0 +1,27 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protoreflect",
+    srcs = [
+        "methods.go",
+        "proto.go",
+        "source.go",
+        "source_gen.go",
+        "type.go",
+        "value.go",
+        "value_union.go",
+        "value_unsafe.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/reflect/protoreflect",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protoreflect",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/reflect/protoregistry/BUILD.bazel b/_tools/src/google.golang.org/protobuf/reflect/protoregistry/BUILD.bazel
new file mode 100644
index 0000000..ff920dd
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/reflect/protoregistry/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protoregistry",
+    srcs = ["registry.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/reflect/protoregistry",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protoregistry",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/runtime/protoiface/BUILD.bazel b/_tools/src/google.golang.org/protobuf/runtime/protoiface/BUILD.bazel
new file mode 100644
index 0000000..69109fd
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/runtime/protoiface/BUILD.bazel
@@ -0,0 +1,21 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protoiface",
+    srcs = [
+        "legacy.go",
+        "methods.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/runtime/protoiface",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protoiface",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/runtime/protoimpl/BUILD.bazel b/_tools/src/google.golang.org/protobuf/runtime/protoimpl/BUILD.bazel
new file mode 100644
index 0000000..7d7bee3
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/runtime/protoimpl/BUILD.bazel
@@ -0,0 +1,23 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protoimpl",
+    srcs = [
+        "impl.go",
+        "version.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/runtime/protoimpl",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/filetype",
+        "//vendor/google.golang.org/protobuf/internal/impl",
+        "//vendor/google.golang.org/protobuf/internal/version",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protoimpl",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/types/descriptorpb/BUILD.bazel b/_tools/src/google.golang.org/protobuf/types/descriptorpb/BUILD.bazel
new file mode 100644
index 0000000..2384b2a
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/types/descriptorpb/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "descriptorpb",
+    srcs = ["descriptor.pb.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/types/descriptorpb",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":descriptorpb",
+    visibility = ["//visibility:public"],
+)
diff --git a/_tools/src/google.golang.org/protobuf/types/pluginpb/BUILD.bazel b/_tools/src/google.golang.org/protobuf/types/pluginpb/BUILD.bazel
new file mode 100644
index 0000000..24a01dd
--- /dev/null
+++ b/_tools/src/google.golang.org/protobuf/types/pluginpb/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "pluginpb",
+    srcs = ["plugin.pb.go"],
+    importpath = "github.com/twitchtv/twirp/_tools/src/google.golang.org/protobuf/types/pluginpb",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":pluginpb",
+    visibility = ["//visibility:public"],
+)
diff --git a/clientcompat/BUILD.bazel b/clientcompat/BUILD.bazel
new file mode 100644
index 0000000..6cde791
--- /dev/null
+++ b/clientcompat/BUILD.bazel
@@ -0,0 +1,25 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "clientcompat_lib",
+    srcs = [
+        "clientcompat.go",
+        "gen.go",
+        "main.go",
+        "run.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/clientcompat",
+    visibility = ["//visibility:private"],
+    deps = [
+        "//:twirp",
+        "//clientcompat/internal/clientcompat",
+        "//vendor/github.com/pkg/errors",
+        "//vendor/google.golang.org/protobuf/proto",
+    ],
+)
+
+go_binary(
+    name = "clientcompat",
+    embed = [":clientcompat_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/clientcompat/gocompat/BUILD.bazel b/clientcompat/gocompat/BUILD.bazel
new file mode 100644
index 0000000..ef7fe06
--- /dev/null
+++ b/clientcompat/gocompat/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "gocompat_lib",
+    srcs = ["gocompat.go"],
+    importpath = "github.com/twitchtv/twirp/clientcompat/gocompat",
+    visibility = ["//visibility:private"],
+    deps = [
+        "//:twirp",
+        "//clientcompat/internal/clientcompat",
+        "//vendor/google.golang.org/protobuf/proto",
+    ],
+)
+
+go_binary(
+    name = "gocompat",
+    embed = [":gocompat_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/clientcompat/internal/clientcompat/BUILD.bazel b/clientcompat/internal/clientcompat/BUILD.bazel
new file mode 100644
index 0000000..cc83cc8
--- /dev/null
+++ b/clientcompat/internal/clientcompat/BUILD.bazel
@@ -0,0 +1,25 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "clientcompat",
+    srcs = [
+        "clientcompat.pb.go",
+        "clientcompat.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/clientcompat/internal/clientcompat",
+    visibility = ["//clientcompat:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":clientcompat",
+    visibility = ["//clientcompat:__subpackages__"],
+)
diff --git a/ctxsetters/BUILD.bazel b/ctxsetters/BUILD.bazel
new file mode 100644
index 0000000..5c6a400
--- /dev/null
+++ b/ctxsetters/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "ctxsetters",
+    srcs = ["ctxsetters.go"],
+    importpath = "github.com/twitchtv/twirp/ctxsetters",
+    visibility = ["//visibility:public"],
+    deps = ["//internal/contextkeys"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":ctxsetters",
+    visibility = ["//visibility:public"],
+)
diff --git a/example/BUILD.bazel b/example/BUILD.bazel
new file mode 100644
index 0000000..dda0229
--- /dev/null
+++ b/example/BUILD.bazel
@@ -0,0 +1,26 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "example",
+    srcs = [
+        "gen.go",
+        "service.pb.go",
+        "service.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/example",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":example",
+    visibility = ["//visibility:public"],
+)
diff --git a/example/cmd/client/BUILD.bazel b/example/cmd/client/BUILD.bazel
new file mode 100644
index 0000000..2109adf
--- /dev/null
+++ b/example/cmd/client/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "client_lib",
+    srcs = ["main.go"],
+    importpath = "github.com/twitchtv/twirp/example/cmd/client",
+    visibility = ["//visibility:private"],
+    deps = [
+        "//:twirp",
+        "//example",
+    ],
+)
+
+go_binary(
+    name = "client",
+    embed = [":client_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/example/cmd/server/BUILD.bazel b/example/cmd/server/BUILD.bazel
new file mode 100644
index 0000000..089f3e6
--- /dev/null
+++ b/example/cmd/server/BUILD.bazel
@@ -0,0 +1,22 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "server_lib",
+    srcs = [
+        "main.go",
+        "statter.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/example/cmd/server",
+    visibility = ["//visibility:private"],
+    deps = [
+        "//:twirp",
+        "//example",
+        "//hooks/statsd",
+    ],
+)
+
+go_binary(
+    name = "server",
+    embed = [":server_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/hooks/statsd/BUILD.bazel b/hooks/statsd/BUILD.bazel
new file mode 100644
index 0000000..b08f35d
--- /dev/null
+++ b/hooks/statsd/BUILD.bazel
@@ -0,0 +1,25 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "statsd",
+    srcs = ["statsd.go"],
+    importpath = "github.com/twitchtv/twirp/hooks/statsd",
+    visibility = ["//visibility:public"],
+    deps = ["//:twirp"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":statsd",
+    visibility = ["//visibility:public"],
+)
+
+go_test(
+    name = "statsd_test",
+    srcs = ["statsd_test.go"],
+    embed = [":statsd"],
+    deps = [
+        "//:twirp",
+        "//internal/twirptest",
+    ],
+)
diff --git a/internal/contextkeys/BUILD.bazel b/internal/contextkeys/BUILD.bazel
new file mode 100644
index 0000000..27c96b7
--- /dev/null
+++ b/internal/contextkeys/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "contextkeys",
+    srcs = ["keys.go"],
+    importpath = "github.com/twitchtv/twirp/internal/contextkeys",
+    visibility = ["//:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":contextkeys",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/descriptors/BUILD.bazel b/internal/descriptors/BUILD.bazel
new file mode 100644
index 0000000..d58de66
--- /dev/null
+++ b/internal/descriptors/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "descriptors",
+    srcs = ["descriptors.go"],
+    importpath = "github.com/twitchtv/twirp/internal/descriptors",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//vendor/github.com/pkg/errors",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":descriptors",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/gen/BUILD.bazel b/internal/gen/BUILD.bazel
new file mode 100644
index 0000000..991e1e0
--- /dev/null
+++ b/internal/gen/BUILD.bazel
@@ -0,0 +1,25 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "gen",
+    srcs = [
+        "logging.go",
+        "main.go",
+        "version.go",
+        "wrappers.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/gen",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//internal/gen/stringutils",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+        "//vendor/google.golang.org/protobuf/types/pluginpb",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":gen",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/gen/stringutils/BUILD.bazel b/internal/gen/stringutils/BUILD.bazel
new file mode 100644
index 0000000..190c263
--- /dev/null
+++ b/internal/gen/stringutils/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "stringutils",
+    srcs = ["stringutils.go"],
+    importpath = "github.com/twitchtv/twirp/internal/gen/stringutils",
+    visibility = ["//:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":stringutils",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/gen/typemap/BUILD.bazel b/internal/gen/typemap/BUILD.bazel
new file mode 100644
index 0000000..f3d611c
--- /dev/null
+++ b/internal/gen/typemap/BUILD.bazel
@@ -0,0 +1,30 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "typemap",
+    srcs = ["typemap.go"],
+    importpath = "github.com/twitchtv/twirp/internal/gen/typemap",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//vendor/github.com/pkg/errors",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":typemap",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "typemap_test",
+    srcs = ["typemap_test.go"],
+    embed = [":typemap"],
+    deps = [
+        "//vendor/github.com/stretchr/testify/assert",
+        "//vendor/github.com/stretchr/testify/require",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+    ],
+)
diff --git a/internal/gen/typemap/testdata/BUILD.bazel b/internal/gen/typemap/testdata/BUILD.bazel
new file mode 100644
index 0000000..52f8309
--- /dev/null
+++ b/internal/gen/typemap/testdata/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "testdata",
+    srcs = ["gen.go"],
+    importpath = "github.com/twitchtv/twirp/internal/gen/typemap/testdata",
+    visibility = ["//:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":testdata",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/twirptest/BUILD.bazel b/internal/twirptest/BUILD.bazel
new file mode 100644
index 0000000..a7d4066
--- /dev/null
+++ b/internal/twirptest/BUILD.bazel
@@ -0,0 +1,43 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "twirptest",
+    srcs = [
+        "gen.go",
+        "hatmakers.go",
+        "service.pb.go",
+        "service.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":twirptest",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "twirptest_test",
+    srcs = [
+        "client_1_13_test.go",
+        "client_test.go",
+        "service_test.go",
+    ],
+    embed = [":twirptest"],
+    deps = [
+        "//:twirp",
+        "//internal/descriptors",
+        "//vendor/github.com/pkg/errors",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+    ],
+)
diff --git a/internal/twirptest/empty_service/BUILD.bazel b/internal/twirptest/empty_service/BUILD.bazel
new file mode 100644
index 0000000..842bc81
--- /dev/null
+++ b/internal/twirptest/empty_service/BUILD.bazel
@@ -0,0 +1,32 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "empty_service",
+    srcs = [
+        "empty_service.pb.go",
+        "empty_service.twirp.go",
+        "gen.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/empty_service",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":empty_service",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "empty_service_test",
+    srcs = ["compile_test.go"],
+    embed = [":empty_service"],
+)
diff --git a/internal/twirptest/google_protobuf_imports/BUILD.bazel b/internal/twirptest/google_protobuf_imports/BUILD.bazel
new file mode 100644
index 0000000..f66a540
--- /dev/null
+++ b/internal/twirptest/google_protobuf_imports/BUILD.bazel
@@ -0,0 +1,34 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "google_protobuf_imports",
+    srcs = [
+        "gen.go",
+        "service.pb.go",
+        "service.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/google_protobuf_imports",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+        "//vendor/google.golang.org/protobuf/types/known/emptypb",
+        "//vendor/google.golang.org/protobuf/types/known/wrapperspb",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":google_protobuf_imports",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "google_protobuf_imports_test",
+    srcs = ["compile_test.go"],
+    embed = [":google_protobuf_imports"],
+)
diff --git a/internal/twirptest/importable/BUILD.bazel b/internal/twirptest/importable/BUILD.bazel
new file mode 100644
index 0000000..7bc7aa9
--- /dev/null
+++ b/internal/twirptest/importable/BUILD.bazel
@@ -0,0 +1,32 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "importable",
+    srcs = [
+        "gen.go",
+        "importable.pb.go",
+        "importable.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/importable",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":importable",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "importable_test",
+    srcs = ["compile_test.go"],
+    embed = [":importable"],
+)
diff --git a/internal/twirptest/importer/BUILD.bazel b/internal/twirptest/importer/BUILD.bazel
new file mode 100644
index 0000000..6b6ce6b
--- /dev/null
+++ b/internal/twirptest/importer/BUILD.bazel
@@ -0,0 +1,33 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "importer",
+    srcs = [
+        "gen.go",
+        "importer.pb.go",
+        "importer.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/importer",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//internal/twirptest/importable",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":importer",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "importer_test",
+    srcs = ["compile_test.go"],
+    embed = [":importer"],
+)
diff --git a/internal/twirptest/importer_local/BUILD.bazel b/internal/twirptest/importer_local/BUILD.bazel
new file mode 100644
index 0000000..d008e55
--- /dev/null
+++ b/internal/twirptest/importer_local/BUILD.bazel
@@ -0,0 +1,33 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "importer_local",
+    srcs = [
+        "gen.go",
+        "importer_local.pb.go",
+        "importer_local.twirp.go",
+        "importer_local_msgdef.pb.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/importer_local",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":importer_local",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "importer_local_test",
+    srcs = ["compile_test.go"],
+    embed = [":importer_local"],
+)
diff --git a/internal/twirptest/importmapping/BUILD.bazel b/internal/twirptest/importmapping/BUILD.bazel
new file mode 100644
index 0000000..bb4a907
--- /dev/null
+++ b/internal/twirptest/importmapping/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "importmapping",
+    srcs = ["gen.go"],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/importmapping",
+    visibility = ["//:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":importmapping",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "importmapping_test",
+    srcs = ["compile_test.go"],
+    embed = [":importmapping"],
+)
diff --git a/internal/twirptest/importmapping/x/BUILD.bazel b/internal/twirptest/importmapping/x/BUILD.bazel
new file mode 100644
index 0000000..5b9d19c
--- /dev/null
+++ b/internal/twirptest/importmapping/x/BUILD.bazel
@@ -0,0 +1,26 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "x",
+    srcs = [
+        "x.pb.go",
+        "x.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/importmapping/x",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//internal/twirptest/importmapping/y",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":x",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/twirptest/importmapping/y/BUILD.bazel b/internal/twirptest/importmapping/y/BUILD.bazel
new file mode 100644
index 0000000..7b73dfc
--- /dev/null
+++ b/internal/twirptest/importmapping/y/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "y",
+    srcs = ["y.pb.go"],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/importmapping/y",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":y",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/twirptest/json_serialization/BUILD.bazel b/internal/twirptest/json_serialization/BUILD.bazel
new file mode 100644
index 0000000..62101a7
--- /dev/null
+++ b/internal/twirptest/json_serialization/BUILD.bazel
@@ -0,0 +1,33 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "json_serialization",
+    srcs = [
+        "gen.go",
+        "json_serialization.pb.go",
+        "json_serialization.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/json_serialization",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":json_serialization",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "json_serialization_test",
+    srcs = ["json_serialization_test.go"],
+    embed = [":json_serialization"],
+    deps = ["//:twirp"],
+)
diff --git a/internal/twirptest/multiple/BUILD.bazel b/internal/twirptest/multiple/BUILD.bazel
new file mode 100644
index 0000000..168a78c
--- /dev/null
+++ b/internal/twirptest/multiple/BUILD.bazel
@@ -0,0 +1,34 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "multiple",
+    srcs = [
+        "gen.go",
+        "multiple1.pb.go",
+        "multiple1.twirp.go",
+        "multiple2.pb.go",
+        "multiple2.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/multiple",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":multiple",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "multiple_test",
+    srcs = ["multiple_test.go"],
+    embed = [":multiple"],
+)
diff --git a/internal/twirptest/no_package_name/BUILD.bazel b/internal/twirptest/no_package_name/BUILD.bazel
new file mode 100644
index 0000000..1f927dd
--- /dev/null
+++ b/internal/twirptest/no_package_name/BUILD.bazel
@@ -0,0 +1,26 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "no_package_name",
+    srcs = [
+        "gen.go",
+        "no_package_name.pb.go",
+        "no_package_name.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/no_package_name",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":no_package_name",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/twirptest/no_package_name_importer/BUILD.bazel b/internal/twirptest/no_package_name_importer/BUILD.bazel
new file mode 100644
index 0000000..7f7fe82
--- /dev/null
+++ b/internal/twirptest/no_package_name_importer/BUILD.bazel
@@ -0,0 +1,33 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "no_package_name_importer",
+    srcs = [
+        "gen.go",
+        "no_package_name_importer.pb.go",
+        "no_package_name_importer.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/no_package_name_importer",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//internal/twirptest/no_package_name",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":no_package_name_importer",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "no_package_name_importer_test",
+    srcs = ["compile_test.go"],
+    embed = [":no_package_name_importer"],
+)
diff --git a/internal/twirptest/service_method_same_name/BUILD.bazel b/internal/twirptest/service_method_same_name/BUILD.bazel
new file mode 100644
index 0000000..4de310c
--- /dev/null
+++ b/internal/twirptest/service_method_same_name/BUILD.bazel
@@ -0,0 +1,32 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "service_method_same_name",
+    srcs = [
+        "gen.go",
+        "service_method_same_name.pb.go",
+        "service_method_same_name.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/service_method_same_name",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":service_method_same_name",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "service_method_same_name_test",
+    srcs = ["compile_test.go"],
+    embed = [":service_method_same_name"],
+)
diff --git a/internal/twirptest/snake_case_names/BUILD.bazel b/internal/twirptest/snake_case_names/BUILD.bazel
new file mode 100644
index 0000000..e37d8d0
--- /dev/null
+++ b/internal/twirptest/snake_case_names/BUILD.bazel
@@ -0,0 +1,36 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "snake_case_names",
+    srcs = [
+        "gen.go",
+        "snake_case_names.pb.go",
+        "snake_case_names.twirp.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/internal/twirptest/snake_case_names",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "//:twirp",
+        "//ctxsetters",
+        "//vendor/google.golang.org/protobuf/encoding/protojson",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":snake_case_names",
+    visibility = ["//:__subpackages__"],
+)
+
+go_test(
+    name = "snake_case_names_test",
+    srcs = [
+        "compatibility_test.go",
+        "compile_test.go",
+    ],
+    embed = [":snake_case_names"],
+    deps = ["//:twirp"],
+)
diff --git a/protoc-gen-twirp/BUILD.bazel b/protoc-gen-twirp/BUILD.bazel
new file mode 100644
index 0000000..7842bb0
--- /dev/null
+++ b/protoc-gen-twirp/BUILD.bazel
@@ -0,0 +1,43 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
+
+go_library(
+    name = "protoc-gen-twirp_lib",
+    srcs = [
+        "command_line.go",
+        "generator.go",
+        "go_naming.go",
+        "main.go",
+    ],
+    importpath = "github.com/twitchtv/twirp/protoc-gen-twirp",
+    visibility = ["//visibility:private"],
+    deps = [
+        "//internal/gen",
+        "//internal/gen/stringutils",
+        "//internal/gen/typemap",
+        "//vendor/github.com/pkg/errors",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+        "//vendor/google.golang.org/protobuf/types/pluginpb",
+    ],
+)
+
+go_binary(
+    name = "protoc-gen-twirp",
+    embed = [":protoc-gen-twirp_lib"],
+    visibility = ["//visibility:public"],
+)
+
+go_test(
+    name = "protoc-gen-twirp_test",
+    srcs = [
+        "command_line_test.go",
+        "generator_test.go",
+        "go_naming_test.go",
+    ],
+    embed = [":protoc-gen-twirp_lib"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+        "//vendor/google.golang.org/protobuf/types/pluginpb",
+    ],
+)
diff --git a/protoc-gen-twirp_python/BUILD.bazel b/protoc-gen-twirp_python/BUILD.bazel
new file mode 100644
index 0000000..c0963f7
--- /dev/null
+++ b/protoc-gen-twirp_python/BUILD.bazel
@@ -0,0 +1,22 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "protoc-gen-twirp_python_lib",
+    srcs = ["main.go"],
+    importpath = "github.com/twitchtv/twirp/protoc-gen-twirp_python",
+    visibility = ["//visibility:private"],
+    deps = [
+        "//internal/gen",
+        "//internal/gen/stringutils",
+        "//internal/gen/typemap",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+        "//vendor/google.golang.org/protobuf/types/pluginpb",
+    ],
+)
+
+go_binary(
+    name = "protoc-gen-twirp_python",
+    embed = [":protoc-gen-twirp_python_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/github.com/davecgh/go-spew/spew/BUILD.bazel b/vendor/github.com/davecgh/go-spew/spew/BUILD.bazel
new file mode 100644
index 0000000..7181c4d
--- /dev/null
+++ b/vendor/github.com/davecgh/go-spew/spew/BUILD.bazel
@@ -0,0 +1,24 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "spew",
+    srcs = [
+        "bypass.go",
+        "bypasssafe.go",
+        "common.go",
+        "config.go",
+        "doc.go",
+        "dump.go",
+        "format.go",
+        "spew.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/github.com/davecgh/go-spew/spew",
+    importpath = "github.com/davecgh/go-spew/spew",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":spew",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/github.com/pkg/errors/BUILD.bazel b/vendor/github.com/pkg/errors/BUILD.bazel
new file mode 100644
index 0000000..5f86d22
--- /dev/null
+++ b/vendor/github.com/pkg/errors/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "errors",
+    srcs = [
+        "errors.go",
+        "stack.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/github.com/pkg/errors",
+    importpath = "github.com/pkg/errors",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":errors",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/github.com/pmezard/go-difflib/difflib/BUILD.bazel b/vendor/github.com/pmezard/go-difflib/difflib/BUILD.bazel
new file mode 100644
index 0000000..7fe4d42
--- /dev/null
+++ b/vendor/github.com/pmezard/go-difflib/difflib/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "difflib",
+    srcs = ["difflib.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/github.com/pmezard/go-difflib/difflib",
+    importpath = "github.com/pmezard/go-difflib/difflib",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":difflib",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/github.com/stretchr/testify/assert/BUILD.bazel b/vendor/github.com/stretchr/testify/assert/BUILD.bazel
new file mode 100644
index 0000000..acbce41
--- /dev/null
+++ b/vendor/github.com/stretchr/testify/assert/BUILD.bazel
@@ -0,0 +1,27 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "assert",
+    srcs = [
+        "assertion_format.go",
+        "assertion_forward.go",
+        "assertions.go",
+        "doc.go",
+        "errors.go",
+        "forward_assertions.go",
+        "http_assertions.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/github.com/stretchr/testify/assert",
+    importpath = "github.com/stretchr/testify/assert",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/github.com/davecgh/go-spew/spew",
+        "//vendor/github.com/pmezard/go-difflib/difflib",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":assert",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/github.com/stretchr/testify/require/BUILD.bazel b/vendor/github.com/stretchr/testify/require/BUILD.bazel
new file mode 100644
index 0000000..438b311
--- /dev/null
+++ b/vendor/github.com/stretchr/testify/require/BUILD.bazel
@@ -0,0 +1,22 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "require",
+    srcs = [
+        "doc.go",
+        "forward_requirements.go",
+        "require.go",
+        "require_forward.go",
+        "requirements.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/github.com/stretchr/testify/require",
+    importpath = "github.com/stretchr/testify/require",
+    visibility = ["//visibility:public"],
+    deps = ["//vendor/github.com/stretchr/testify/assert"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":require",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/encoding/protojson/BUILD.bazel b/vendor/google.golang.org/protobuf/encoding/protojson/BUILD.bazel
new file mode 100644
index 0000000..ef488a3
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/encoding/protojson/BUILD.bazel
@@ -0,0 +1,35 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protojson",
+    srcs = [
+        "decode.go",
+        "doc.go",
+        "encode.go",
+        "well_known_types.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/encoding/protojson",
+    importpath = "google.golang.org/protobuf/encoding/protojson",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/encoding/json",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/order",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/set",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protojson",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/encoding/prototext/BUILD.bazel b/vendor/google.golang.org/protobuf/encoding/prototext/BUILD.bazel
new file mode 100644
index 0000000..7052481
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/encoding/prototext/BUILD.bazel
@@ -0,0 +1,34 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "prototext",
+    srcs = [
+        "decode.go",
+        "doc.go",
+        "encode.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/encoding/prototext",
+    importpath = "google.golang.org/protobuf/encoding/prototext",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/encoding/text",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/order",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/set",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":prototext",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/encoding/protowire/BUILD.bazel b/vendor/google.golang.org/protobuf/encoding/protowire/BUILD.bazel
new file mode 100644
index 0000000..e1d5113
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/encoding/protowire/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protowire",
+    srcs = ["wire.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/encoding/protowire",
+    importpath = "google.golang.org/protobuf/encoding/protowire",
+    visibility = ["//visibility:public"],
+    deps = ["//vendor/google.golang.org/protobuf/internal/errors"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protowire",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/descfmt/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/descfmt/BUILD.bazel
new file mode 100644
index 0000000..7406495
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/descfmt/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "descfmt",
+    srcs = ["stringer.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/descfmt",
+    importpath = "google.golang.org/protobuf/internal/descfmt",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/detrand",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":descfmt",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/descopts/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/descopts/BUILD.bazel
new file mode 100644
index 0000000..8d927cd
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/descopts/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "descopts",
+    srcs = ["options.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/descopts",
+    importpath = "google.golang.org/protobuf/internal/descopts",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = ["//vendor/google.golang.org/protobuf/reflect/protoreflect"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":descopts",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/detrand/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/detrand/BUILD.bazel
new file mode 100644
index 0000000..f2a44d2
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/detrand/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "detrand",
+    srcs = ["rand.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/detrand",
+    importpath = "google.golang.org/protobuf/internal/detrand",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":detrand",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/encoding/defval/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/encoding/defval/BUILD.bazel
new file mode 100644
index 0000000..6deaa63
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/encoding/defval/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "defval",
+    srcs = ["default.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/encoding/defval",
+    importpath = "google.golang.org/protobuf/internal/encoding/defval",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/encoding/text",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":defval",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/encoding/json/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/encoding/json/BUILD.bazel
new file mode 100644
index 0000000..6b189f6
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/encoding/json/BUILD.bazel
@@ -0,0 +1,26 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "json",
+    srcs = [
+        "decode.go",
+        "decode_number.go",
+        "decode_string.go",
+        "decode_token.go",
+        "encode.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/encoding/json",
+    importpath = "google.golang.org/protobuf/internal/encoding/json",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/detrand",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":json",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/encoding/messageset/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/encoding/messageset/BUILD.bazel
new file mode 100644
index 0000000..b4314ed
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/encoding/messageset/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "messageset",
+    srcs = ["messageset.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/encoding/messageset",
+    importpath = "google.golang.org/protobuf/internal/encoding/messageset",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":messageset",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/encoding/tag/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/encoding/tag/BUILD.bazel
new file mode 100644
index 0000000..018b233
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/encoding/tag/BUILD.bazel
@@ -0,0 +1,21 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "tag",
+    srcs = ["tag.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/encoding/tag",
+    importpath = "google.golang.org/protobuf/internal/encoding/tag",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/encoding/defval",
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":tag",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/encoding/text/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/encoding/text/BUILD.bazel
new file mode 100644
index 0000000..366fe0d
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/encoding/text/BUILD.bazel
@@ -0,0 +1,28 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "text",
+    srcs = [
+        "decode.go",
+        "decode_number.go",
+        "decode_string.go",
+        "decode_token.go",
+        "doc.go",
+        "encode.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/encoding/text",
+    importpath = "google.golang.org/protobuf/internal/encoding/text",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/detrand",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":text",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/errors/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/errors/BUILD.bazel
new file mode 100644
index 0000000..1a36a59
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/errors/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "errors",
+    srcs = [
+        "errors.go",
+        "is_go112.go",
+        "is_go113.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/errors",
+    importpath = "google.golang.org/protobuf/internal/errors",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = ["//vendor/google.golang.org/protobuf/internal/detrand"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":errors",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/filedesc/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/filedesc/BUILD.bazel
new file mode 100644
index 0000000..b796ade
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/filedesc/BUILD.bazel
@@ -0,0 +1,37 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "filedesc",
+    srcs = [
+        "build.go",
+        "desc.go",
+        "desc_init.go",
+        "desc_lazy.go",
+        "desc_list.go",
+        "desc_list_gen.go",
+        "placeholder.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/filedesc",
+    importpath = "google.golang.org/protobuf/internal/filedesc",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/descfmt",
+        "//vendor/google.golang.org/protobuf/internal/descopts",
+        "//vendor/google.golang.org/protobuf/internal/encoding/defval",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":filedesc",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/filetype/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/filetype/BUILD.bazel
new file mode 100644
index 0000000..9a69218
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/filetype/BUILD.bazel
@@ -0,0 +1,22 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "filetype",
+    srcs = ["build.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/filetype",
+    importpath = "google.golang.org/protobuf/internal/filetype",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/descopts",
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/impl",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":filetype",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/flags/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/flags/BUILD.bazel
new file mode 100644
index 0000000..e08d976
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/flags/BUILD.bazel
@@ -0,0 +1,18 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "flags",
+    srcs = [
+        "flags.go",
+        "proto_legacy_disable.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/flags",
+    importpath = "google.golang.org/protobuf/internal/flags",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":flags",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/genid/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/genid/BUILD.bazel
new file mode 100644
index 0000000..06a634f
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/genid/BUILD.bazel
@@ -0,0 +1,32 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "genid",
+    srcs = [
+        "any_gen.go",
+        "api_gen.go",
+        "descriptor_gen.go",
+        "doc.go",
+        "duration_gen.go",
+        "empty_gen.go",
+        "field_mask_gen.go",
+        "goname.go",
+        "map_entry.go",
+        "source_context_gen.go",
+        "struct_gen.go",
+        "timestamp_gen.go",
+        "type_gen.go",
+        "wrappers.go",
+        "wrappers_gen.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/genid",
+    importpath = "google.golang.org/protobuf/internal/genid",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = ["//vendor/google.golang.org/protobuf/reflect/protoreflect"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":genid",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/impl/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/impl/BUILD.bazel
new file mode 100644
index 0000000..12a221c
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/impl/BUILD.bazel
@@ -0,0 +1,68 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "impl",
+    srcs = [
+        "api_export.go",
+        "checkinit.go",
+        "codec_extension.go",
+        "codec_field.go",
+        "codec_gen.go",
+        "codec_map.go",
+        "codec_map_go111.go",
+        "codec_map_go112.go",
+        "codec_message.go",
+        "codec_messageset.go",
+        "codec_tables.go",
+        "codec_unsafe.go",
+        "convert.go",
+        "convert_list.go",
+        "convert_map.go",
+        "decode.go",
+        "encode.go",
+        "enum.go",
+        "extension.go",
+        "legacy_enum.go",
+        "legacy_export.go",
+        "legacy_extension.go",
+        "legacy_file.go",
+        "legacy_message.go",
+        "merge.go",
+        "merge_gen.go",
+        "message.go",
+        "message_reflect.go",
+        "message_reflect_field.go",
+        "message_reflect_gen.go",
+        "pointer_unsafe.go",
+        "validate.go",
+        "weak.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/impl",
+    importpath = "google.golang.org/protobuf/internal/impl",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/prototext",
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/descopts",
+        "//vendor/google.golang.org/protobuf/internal/detrand",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/encoding/tag",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/order",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/proto",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+        "//vendor/google.golang.org/protobuf/runtime/protoiface",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":impl",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/order/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/order/BUILD.bazel
new file mode 100644
index 0000000..082984a
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/order/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "order",
+    srcs = [
+        "order.go",
+        "range.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/order",
+    importpath = "google.golang.org/protobuf/internal/order",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = ["//vendor/google.golang.org/protobuf/reflect/protoreflect"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":order",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/pragma/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/pragma/BUILD.bazel
new file mode 100644
index 0000000..cd16e3d
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/pragma/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "pragma",
+    srcs = ["pragma.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/pragma",
+    importpath = "google.golang.org/protobuf/internal/pragma",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":pragma",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/set/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/set/BUILD.bazel
new file mode 100644
index 0000000..28aa20c
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/set/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "set",
+    srcs = ["ints.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/set",
+    importpath = "google.golang.org/protobuf/internal/set",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":set",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/strs/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/strs/BUILD.bazel
new file mode 100644
index 0000000..bebd020
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/strs/BUILD.bazel
@@ -0,0 +1,22 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "strs",
+    srcs = [
+        "strings.go",
+        "strings_unsafe.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/strs",
+    importpath = "google.golang.org/protobuf/internal/strs",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":strs",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/internal/version/BUILD.bazel b/vendor/google.golang.org/protobuf/internal/version/BUILD.bazel
new file mode 100644
index 0000000..258cb66
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/internal/version/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "version",
+    srcs = ["version.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/internal/version",
+    importpath = "google.golang.org/protobuf/internal/version",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":version",
+    visibility = ["//vendor/google.golang.org/protobuf:__subpackages__"],
+)
diff --git a/vendor/google.golang.org/protobuf/proto/BUILD.bazel b/vendor/google.golang.org/protobuf/proto/BUILD.bazel
new file mode 100644
index 0000000..58858f5
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/proto/BUILD.bazel
@@ -0,0 +1,45 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "proto",
+    srcs = [
+        "checkinit.go",
+        "decode.go",
+        "decode_gen.go",
+        "doc.go",
+        "encode.go",
+        "encode_gen.go",
+        "equal.go",
+        "extension.go",
+        "merge.go",
+        "messageset.go",
+        "proto.go",
+        "proto_methods.go",
+        "reset.go",
+        "size.go",
+        "size_gen.go",
+        "wrappers.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/proto",
+    importpath = "google.golang.org/protobuf/proto",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/internal/genid",
+        "//vendor/google.golang.org/protobuf/internal/order",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/internal/strs",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/reflect/protoregistry",
+        "//vendor/google.golang.org/protobuf/runtime/protoiface",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":proto",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/reflect/protoreflect/BUILD.bazel b/vendor/google.golang.org/protobuf/reflect/protoreflect/BUILD.bazel
new file mode 100644
index 0000000..2634669
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/reflect/protoreflect/BUILD.bazel
@@ -0,0 +1,28 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protoreflect",
+    srcs = [
+        "methods.go",
+        "proto.go",
+        "source.go",
+        "source_gen.go",
+        "type.go",
+        "value.go",
+        "value_union.go",
+        "value_unsafe.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/reflect/protoreflect",
+    importpath = "google.golang.org/protobuf/reflect/protoreflect",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/encoding/protowire",
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protoreflect",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/reflect/protoregistry/BUILD.bazel b/vendor/google.golang.org/protobuf/reflect/protoregistry/BUILD.bazel
new file mode 100644
index 0000000..53ebac6
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/reflect/protoregistry/BUILD.bazel
@@ -0,0 +1,21 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protoregistry",
+    srcs = ["registry.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/reflect/protoregistry",
+    importpath = "google.golang.org/protobuf/reflect/protoregistry",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/encoding/messageset",
+        "//vendor/google.golang.org/protobuf/internal/errors",
+        "//vendor/google.golang.org/protobuf/internal/flags",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protoregistry",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/runtime/protoiface/BUILD.bazel b/vendor/google.golang.org/protobuf/runtime/protoiface/BUILD.bazel
new file mode 100644
index 0000000..a9ff587
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/runtime/protoiface/BUILD.bazel
@@ -0,0 +1,22 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protoiface",
+    srcs = [
+        "legacy.go",
+        "methods.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/runtime/protoiface",
+    importpath = "google.golang.org/protobuf/runtime/protoiface",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/pragma",
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protoiface",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/runtime/protoimpl/BUILD.bazel b/vendor/google.golang.org/protobuf/runtime/protoimpl/BUILD.bazel
new file mode 100644
index 0000000..7354f26
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/runtime/protoimpl/BUILD.bazel
@@ -0,0 +1,24 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "protoimpl",
+    srcs = [
+        "impl.go",
+        "version.go",
+    ],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/runtime/protoimpl",
+    importpath = "google.golang.org/protobuf/runtime/protoimpl",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/internal/filedesc",
+        "//vendor/google.golang.org/protobuf/internal/filetype",
+        "//vendor/google.golang.org/protobuf/internal/impl",
+        "//vendor/google.golang.org/protobuf/internal/version",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":protoimpl",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/types/descriptorpb/BUILD.bazel b/vendor/google.golang.org/protobuf/types/descriptorpb/BUILD.bazel
new file mode 100644
index 0000000..e2824a0
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/types/descriptorpb/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "descriptorpb",
+    srcs = ["descriptor.pb.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/types/descriptorpb",
+    importpath = "google.golang.org/protobuf/types/descriptorpb",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoiface",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":descriptorpb",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/types/known/emptypb/BUILD.bazel b/vendor/google.golang.org/protobuf/types/known/emptypb/BUILD.bazel
new file mode 100644
index 0000000..0bbb695
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/types/known/emptypb/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "emptypb",
+    srcs = ["empty.pb.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/types/known/emptypb",
+    importpath = "google.golang.org/protobuf/types/known/emptypb",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":emptypb",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/types/known/wrapperspb/BUILD.bazel b/vendor/google.golang.org/protobuf/types/known/wrapperspb/BUILD.bazel
new file mode 100644
index 0000000..82d4026
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/types/known/wrapperspb/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "wrapperspb",
+    srcs = ["wrappers.pb.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/types/known/wrapperspb",
+    importpath = "google.golang.org/protobuf/types/known/wrapperspb",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":wrapperspb",
+    visibility = ["//visibility:public"],
+)
diff --git a/vendor/google.golang.org/protobuf/types/pluginpb/BUILD.bazel b/vendor/google.golang.org/protobuf/types/pluginpb/BUILD.bazel
new file mode 100644
index 0000000..6ad8879
--- /dev/null
+++ b/vendor/google.golang.org/protobuf/types/pluginpb/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "pluginpb",
+    srcs = ["plugin.pb.go"],
+    importmap = "github.com/twitchtv/twirp/vendor/google.golang.org/protobuf/types/pluginpb",
+    importpath = "google.golang.org/protobuf/types/pluginpb",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//vendor/google.golang.org/protobuf/reflect/protoreflect",
+        "//vendor/google.golang.org/protobuf/runtime/protoimpl",
+        "//vendor/google.golang.org/protobuf/types/descriptorpb",
+    ],
+)
+
+alias(
+    name = "go_default_library",
+    actual = ":pluginpb",
+    visibility = ["//visibility:public"],
+)
